import core:out;

mod My_Module {

enum My_Enum {
		Element,
		Value = 2,
		Type: String = "Hi"
}

union My_Union {
		Bruh: Int,
		Cuh: My_Enum,
}

struct My_Struct {
		enum: My_Enum,
		union!: My_Union, \\ '!' - public
}

impl My_Struct {
		\\ '!' left - public
		\\ '@' right - eqv to Rust's 'self' 
		\\ '?' right - eqv to Rust's 'mut self'
		\\ '!' right - eqv to Jakt's throws'
		proc do_stuff!(thing: Thing) @!-> Thing {
				cmp .enum == Element =>
						do_stuff(thing: thing);
				obj i?: Int = 0; \\ '?' - mutable
				loop ++i \* does ++i after loop \ {
						cmp i >= 3 =>
								break;
						.do_other_stuff; \\ optional parentheses
				}
				obj addr: @Thing = @thing;
				obj derref: Thing = #thing;
				ret Thing {
						.sub_thing = thing,
				};
		}
	
		proc do_other_stuff {
				out:write(\"Hello, World!\n\0");
		}
}

}

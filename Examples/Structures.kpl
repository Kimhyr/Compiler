structure Token {
    span :: structure Span {
        from :: structure Point {
            row :: UInt64,
            column :: UInt64,
        },
        to :: Token:Span:Point,
    },
    kind :: enumerare Kind :: UInt8 {
        Identifier,
        Keyword,
        Literal,
        Punctuator,
        Operator,
        Modifier,
    },
    value :: unistruct Value {
        Identifier :: @UInt8,
        Keyword :: enumerare Keyword {
            Structure,
            Enumerare,
            Unistruct,
            Procedure,
            Datum,
            Label,
            Return,
            Switch,
            Jumpto,
            If,
        },
        Literal :: structure Literal {
            kind :: enumerare Kind {
                Integer,
                Float,
                Character,
                String,
            },
            value :: unistruct Value {
                Integer :: UInt64,
                Float :: Float128,
                Character :: UInt16,
                String :: @UInt16,
            },
        },
        Punctuator :: UInt16,
        Operator :: UInt16,
        Modifier :: UInt16,
    },
}

implement Token:Value:Literal {
    procedure !Create(
        kind :: Token:Value:Literal:Kind,
        value :: Token:Value:Literal:Value
    ) -> Token:Value:Literal {
        return Token:Value:Literal {
            .kind = kind,
            .value = value,
        };
    }
}

implement Token:Span:Point {
    procedure !Create(
        row :: UInt64, column :: UInt64
    ) -> Token:Span:Point {
        return Token:Span:Point {
            .row = row,
            .column = column,
        };
    }
}

implement Token:Span {
    procedure !Create(
        from :: Token:Point, to :: Token:Point
    ) -> Token:Span {
        return Token:Span {
            .from = from,
            .to = to,
        };
    }
}

implement Token {
    @?procedure !Create(
        span :: Toen:Span, kind :: Token:Kind,
        value :: Token:Value
    ) -> Token {
        return Token {
            .span = span,
            .kind = kind,
            .value = value,
        };
    }

    @?procedure !Destroy {
        if 'kind == Token:Kind:Identifier
            => jumpto IDENTIFIER;
        if 'kind == Token:Kind:Literal & 'value.Literal.kind == Token:Value:Literal:Kind:String
            => Memory:free('value.Literal.value.String);
        jumpto END;
    label IDENTIFIER :=
        Memory:Free('value.Identifier);
        jumpto END;
    label END :=
        return;
    }
}


